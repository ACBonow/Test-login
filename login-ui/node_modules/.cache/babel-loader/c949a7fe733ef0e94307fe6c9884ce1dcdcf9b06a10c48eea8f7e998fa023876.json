{"ast":null,"code":"import axios from 'axios'; // Importa a biblioteca axios para fazer solicitações HTTP\nimport { config } from '../../Constants'; // Importa a configuração do aplicativo\n//Este arquivo JavaScript define o módulo LoginApi, que contém várias funções para interagir com a API de autenticação\n// do aplicativo. Ele usa a biblioteca axios para fazer solicitações HTTP e a biblioteca config para obter a URL\n// base da API.\n\n// Define o objeto LoginApi com várias funções para interagir com a API\nexport const LoginApi = {\n  authenticate,\n  signup,\n  numberOfUsers,\n  getUsers,\n  deleteUser,\n  changeUserRole,\n  recoveryPass\n};\n\n// Função para autenticar um usuário\nfunction authenticate(email, password) {\n  // Faz uma solicitação POST para a rota de autenticação da API\n  return instance.post('/auth/authenticate', {\n    email,\n    password\n  }, {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n}\n\n// Função para registrar um novo usuário\nfunction signup(user) {\n  // Faz uma solicitação POST para a rota de registro da API\n  return instance.post('/auth/signup', user, {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n}\n\n// Função para recuperar a senha de um usuário\nfunction recoveryPass(user) {\n  // Faz uma solicitação PUT para a rota de recuperação de senha da API\n  return instance.put('/auth/recovery-password', user, {\n    headers: {\n      'Content-type': 'application/json'\n    }\n  });\n}\n\n// Função para obter o número de usuários\nfunction numberOfUsers() {\n  // Faz uma solicitação GET para a rota que retorna o número de usuários\n  return instance.get('/public/numberOfUsers');\n}\n\n// Função para obter os usuários\nfunction getUsers(user, email) {\n  // Define a URL com base no email fornecido\n  const url = email ? `/api/users/${email}` : '/api/users';\n  // Faz uma solicitação GET para a rota de usuários da API\n  return instance.get(url, {\n    headers: {\n      'Authorization': basicAuth(user)\n    }\n  });\n}\n\n// Função para excluir um usuário\nfunction deleteUser(user, email) {\n  // Faz uma solicitação DELETE para a rota de usuários da API\n  return instance.delete(`/api/users/${email}`, {\n    headers: {\n      'Authorization': basicAuth(user)\n    }\n  });\n}\n\n// Função para alterar o papel de um usuário\nfunction changeUserRole(user, email, newRole) {\n  // Faz uma solicitação PUT para a rota de alteração de papel da API\n  return instance.put(`/api/users/change-role/${email}/${newRole}`, {\n    email,\n    role: newRole\n  }, {\n    headers: {\n      'Authorization': basicAuth(user)\n    }\n  });\n}\n\n// Cria uma instância do axios com a URL base da API\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n});\n\n// Função auxiliar para criar o cabeçalho de autenticação básica\nfunction basicAuth(user) {\n  return `Basic ${user.authdata}`;\n}","map":{"version":3,"names":["axios","config","LoginApi","authenticate","signup","numberOfUsers","getUsers","deleteUser","changeUserRole","recoveryPass","email","password","instance","post","headers","user","put","get","url","basicAuth","delete","newRole","role","create","baseURL","API_BASE_URL","authdata"],"sources":["C:/Users/bonow/Desktop/Teste-Login(recoveryFuncionando)/Teste-Login/login-ui/src/components/misc/LoginApi.js"],"sourcesContent":["import axios from 'axios' // Importa a biblioteca axios para fazer solicitações HTTP\nimport { config } from '../../Constants' // Importa a configuração do aplicativo\n//Este arquivo JavaScript define o módulo LoginApi, que contém várias funções para interagir com a API de autenticação\n// do aplicativo. Ele usa a biblioteca axios para fazer solicitações HTTP e a biblioteca config para obter a URL\n// base da API.\n\n// Define o objeto LoginApi com várias funções para interagir com a API\nexport const LoginApi = {\n  authenticate,\n  signup,\n  numberOfUsers,\n  getUsers,\n  deleteUser,\n  changeUserRole,\n  recoveryPass\n}\n\n// Função para autenticar um usuário\nfunction authenticate(email, password) {\n  // Faz uma solicitação POST para a rota de autenticação da API\n  return instance.post('/auth/authenticate', { email, password }, {\n    headers: { 'Content-type': 'application/json' }\n  })\n}\n\n// Função para registrar um novo usuário\nfunction signup(user) {\n  // Faz uma solicitação POST para a rota de registro da API\n  return instance.post('/auth/signup', user, {\n    headers: { 'Content-type': 'application/json' }\n  })\n}\n\n// Função para recuperar a senha de um usuário\nfunction recoveryPass(user) {\n  // Faz uma solicitação PUT para a rota de recuperação de senha da API\n  return instance.put('/auth/recovery-password', user, {\n    headers: { 'Content-type': 'application/json' }\n  })\n}\n\n// Função para obter o número de usuários\nfunction numberOfUsers() {\n  // Faz uma solicitação GET para a rota que retorna o número de usuários\n  return instance.get('/public/numberOfUsers')\n}\n\n// Função para obter os usuários\nfunction getUsers(user, email) {\n  // Define a URL com base no email fornecido\n  const url = email ? `/api/users/${email}` : '/api/users'\n  // Faz uma solicitação GET para a rota de usuários da API\n  return instance.get(url, {\n    headers: { 'Authorization': basicAuth(user) }\n  })\n}\n\n// Função para excluir um usuário\nfunction deleteUser(user, email) {\n  // Faz uma solicitação DELETE para a rota de usuários da API\n  return instance.delete(`/api/users/${email}`, {\n    headers: { 'Authorization': basicAuth(user) }\n  })\n}\n\n// Função para alterar o papel de um usuário\nfunction changeUserRole(user, email, newRole) {\n  // Faz uma solicitação PUT para a rota de alteração de papel da API\n  return instance.put(`/api/users/change-role/${email}/${newRole}`, {email, role: newRole }, {\n    headers: { 'Authorization': basicAuth(user) }\n  })\n}\n\n// Cria uma instância do axios com a URL base da API\nconst instance = axios.create({\n  baseURL: config.url.API_BASE_URL\n})\n\n// Função auxiliar para criar o cabeçalho de autenticação básica\nfunction basicAuth(user) {\n  return `Basic ${user.authdata}`\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO,EAAC;AAC1B,SAASC,MAAM,QAAQ,iBAAiB,EAAC;AACzC;AACA;AACA;;AAEA;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,YAAY;EACZC,MAAM;EACNC,aAAa;EACbC,QAAQ;EACRC,UAAU;EACVC,cAAc;EACdC;AACF,CAAC;;AAED;AACA,SAASN,YAAYA,CAACO,KAAK,EAAEC,QAAQ,EAAE;EACrC;EACA,OAAOC,QAAQ,CAACC,IAAI,CAAC,oBAAoB,EAAE;IAAEH,KAAK;IAAEC;EAAS,CAAC,EAAE;IAC9DG,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;AACJ;;AAEA;AACA,SAASV,MAAMA,CAACW,IAAI,EAAE;EACpB;EACA,OAAOH,QAAQ,CAACC,IAAI,CAAC,cAAc,EAAEE,IAAI,EAAE;IACzCD,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;AACJ;;AAEA;AACA,SAASL,YAAYA,CAACM,IAAI,EAAE;EAC1B;EACA,OAAOH,QAAQ,CAACI,GAAG,CAAC,yBAAyB,EAAED,IAAI,EAAE;IACnDD,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB;EAChD,CAAC,CAAC;AACJ;;AAEA;AACA,SAAST,aAAaA,CAAA,EAAG;EACvB;EACA,OAAOO,QAAQ,CAACK,GAAG,CAAC,uBAAuB,CAAC;AAC9C;;AAEA;AACA,SAASX,QAAQA,CAACS,IAAI,EAAEL,KAAK,EAAE;EAC7B;EACA,MAAMQ,GAAG,GAAGR,KAAK,GAAI,cAAaA,KAAM,EAAC,GAAG,YAAY;EACxD;EACA,OAAOE,QAAQ,CAACK,GAAG,CAACC,GAAG,EAAE;IACvBJ,OAAO,EAAE;MAAE,eAAe,EAAEK,SAAS,CAACJ,IAAI;IAAE;EAC9C,CAAC,CAAC;AACJ;;AAEA;AACA,SAASR,UAAUA,CAACQ,IAAI,EAAEL,KAAK,EAAE;EAC/B;EACA,OAAOE,QAAQ,CAACQ,MAAM,CAAE,cAAaV,KAAM,EAAC,EAAE;IAC5CI,OAAO,EAAE;MAAE,eAAe,EAAEK,SAAS,CAACJ,IAAI;IAAE;EAC9C,CAAC,CAAC;AACJ;;AAEA;AACA,SAASP,cAAcA,CAACO,IAAI,EAAEL,KAAK,EAAEW,OAAO,EAAE;EAC5C;EACA,OAAOT,QAAQ,CAACI,GAAG,CAAE,0BAAyBN,KAAM,IAAGW,OAAQ,EAAC,EAAE;IAACX,KAAK;IAAEY,IAAI,EAAED;EAAQ,CAAC,EAAE;IACzFP,OAAO,EAAE;MAAE,eAAe,EAAEK,SAAS,CAACJ,IAAI;IAAE;EAC9C,CAAC,CAAC;AACJ;;AAEA;AACA,MAAMH,QAAQ,GAAGZ,KAAK,CAACuB,MAAM,CAAC;EAC5BC,OAAO,EAAEvB,MAAM,CAACiB,GAAG,CAACO;AACtB,CAAC,CAAC;;AAEF;AACA,SAASN,SAASA,CAACJ,IAAI,EAAE;EACvB,OAAQ,SAAQA,IAAI,CAACW,QAAS,EAAC;AACjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}