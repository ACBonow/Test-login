{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bonow\\\\Desktop\\\\Teste-Login(recoveryFuncionando)\\\\Teste-Login\\\\login-ui\\\\src\\\\components\\\\admin\\\\AdminPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport { useAuth } from '../context/AuthContext';\nimport { LoginApi } from '../misc/LoginApi';\nimport AdminTab from './AdminTab';\nimport { handleLogError } from '../misc/Helpers';\n\n// Este arquivo define o componente AdminPage, que é a página de administração do aplicativo.\n// Ele permite que um administrador visualize, pesquise e exclua usuários, além de alterar o papel de um usuário.\n// Este componente usa o contexto de autenticação para verificar se o usuário atual é um administrador.\n// Se o usuário atual não for um administrador, ele será redirecionado para a página inicial.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AdminPage() {\n  _s();\n  const Auth = useAuth(); // Obtenha o contexto de autenticação\n  const user = Auth.getUser(); // Obtenha o usuário atual\n  const isAdmin = user.role === 'ADMIN'; // Verifique se o usuário atual é um administrador\n\n  // Defina o estado para a lista de usuários, a pesquisa de email do usuário e o estado de carregamento dos usuários\n  const [users, setUsers] = useState([]);\n  const [userEmailSearch, setUserEmailSearch] = useState('');\n  const [isUsersLoading, setIsUsersLoading] = useState(false);\n\n  // Quando o componente é montado, obtenha a lista de usuários\n  useEffect(() => {\n    handleGetUsers();\n  }, []);\n\n  // Manipulador para mudanças nos campos de entrada\n  const handleInputChange = (e, {\n    name,\n    value\n  }) => {\n    if (name === 'userEmailSearch') {\n      setUserEmailSearch(value);\n    }\n  };\n\n  // Função para obter a lista de usuários\n  const handleGetUsers = async () => {\n    try {\n      setIsUsersLoading(true); // Inicie o carregamento\n      const response = await LoginApi.getUsers(user); // Obtenha a lista de usuários\n      const users = response.data; // Extraia os usuários da resposta\n      setUsers(users); // Atualize o estado com os novos usuários\n    } catch (error) {\n      handleLogError(error); // Manipule qualquer erro que ocorra\n    } finally {\n      setIsUsersLoading(false); // Pare o carregamento\n    }\n  };\n\n  // Função para excluir um usuário\n  const handleDeleteUser = async email => {\n    try {\n      await LoginApi.deleteUser(user, email); // Exclua o usuário\n      await handleGetUsers(); // Atualize a lista de usuários\n    } catch (error) {\n      handleLogError(error); // Manipule qualquer erro que ocorra\n    }\n  };\n\n  // Função para pesquisar um usuário\n  const handleSearchUser = async () => {\n    try {\n      const response = await LoginApi.getUsers(user, userEmailSearch); // Pesquise o usuário\n      const data = response.data; // Extraia os dados da resposta\n      const users = data instanceof Array ? data : [data]; // Se os dados forem um array, use-os, caso contrário, crie um array com os dados\n      setUsers(users); // Atualize o estado com os novos usuários\n    } catch (error) {\n      handleLogError(error); // Manipule qualquer erro que ocorra\n      setUsers([]); // Limpe a lista de usuários\n    }\n  };\n\n  // Função para alterar o papel de um usuário\n  const handleChangeRole = async (email, newRole) => {\n    try {\n      await LoginApi.changeUserRole(user, email, newRole); // Altere o papel do usuário\n      await handleGetUsers(); // Atualize a lista de usuários\n    } catch (error) {\n      handleLogError(error); // Manipule qualquer erro que ocorra\n    }\n  };\n\n  // Se o usuário atual não for um administrador, redirecione para a página inicial\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Renderize o componente AdminTab com as props apropriadas\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(AdminTab, {\n      isUsersLoading: isUsersLoading,\n      users: users,\n      userEmailSearch: userEmailSearch,\n      handleDeleteUser: handleDeleteUser,\n      handleSearchUser: handleSearchUser,\n      handleInputChange: handleInputChange,\n      handleChangeRole: handleChangeRole\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 7\n  }, this);\n}\n_s(AdminPage, \"e7h5BGs7pxbQyGnlq0uRlANW+7I=\", false, function () {\n  return [useAuth];\n});\n_c = AdminPage;\nexport default AdminPage;\nvar _c;\n$RefreshReg$(_c, \"AdminPage\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","Container","useAuth","LoginApi","AdminTab","handleLogError","jsxDEV","_jsxDEV","AdminPage","_s","Auth","user","getUser","isAdmin","role","users","setUsers","userEmailSearch","setUserEmailSearch","isUsersLoading","setIsUsersLoading","handleGetUsers","handleInputChange","e","name","value","response","getUsers","data","error","handleDeleteUser","email","deleteUser","handleSearchUser","Array","handleChangeRole","newRole","changeUserRole","to","fileName","_jsxFileName","lineNumber","columnNumber","children","_c","$RefreshReg$"],"sources":["C:/Users/bonow/Desktop/Teste-Login(recoveryFuncionando)/Teste-Login/login-ui/src/components/admin/AdminPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { Container } from 'semantic-ui-react'\nimport { useAuth } from '../context/AuthContext'\nimport { LoginApi } from '../misc/LoginApi'\nimport AdminTab from './AdminTab'\nimport { handleLogError } from '../misc/Helpers'\n\n// Este arquivo define o componente AdminPage, que é a página de administração do aplicativo.\n// Ele permite que um administrador visualize, pesquise e exclua usuários, além de alterar o papel de um usuário.\n// Este componente usa o contexto de autenticação para verificar se o usuário atual é um administrador.\n// Se o usuário atual não for um administrador, ele será redirecionado para a página inicial.\n\nfunction AdminPage() {\n  const Auth = useAuth() // Obtenha o contexto de autenticação\n  const user = Auth.getUser() // Obtenha o usuário atual\n  const isAdmin = user.role === 'ADMIN' // Verifique se o usuário atual é um administrador\n\n  // Defina o estado para a lista de usuários, a pesquisa de email do usuário e o estado de carregamento dos usuários\n  const [users, setUsers] = useState([])\n  const [userEmailSearch, setUserEmailSearch] = useState('')\n  const [isUsersLoading, setIsUsersLoading] = useState(false)\n\n  // Quando o componente é montado, obtenha a lista de usuários\n  useEffect(() => {\n    handleGetUsers()\n  }, [])\n\n  // Manipulador para mudanças nos campos de entrada\n  const handleInputChange = (e, { name, value }) => {\n    if (name === 'userEmailSearch') {\n      setUserEmailSearch(value)\n    }\n  }\n\n  // Função para obter a lista de usuários\n  const handleGetUsers = async () => {\n    try {\n      setIsUsersLoading(true) // Inicie o carregamento\n      const response = await LoginApi.getUsers(user) // Obtenha a lista de usuários\n      const users = response.data // Extraia os usuários da resposta\n      setUsers(users) // Atualize o estado com os novos usuários\n    } catch (error) {\n      handleLogError(error) // Manipule qualquer erro que ocorra\n    } finally {\n      setIsUsersLoading(false) // Pare o carregamento\n    }\n  }\n\n  // Função para excluir um usuário\n  const handleDeleteUser = async (email) => {\n    try {\n      await LoginApi.deleteUser(user, email) // Exclua o usuário\n      await handleGetUsers() // Atualize a lista de usuários\n    } catch (error) {\n      handleLogError(error) // Manipule qualquer erro que ocorra\n    }\n  }\n\n  // Função para pesquisar um usuário\n  const handleSearchUser = async () => {\n    try {\n      const response = await LoginApi.getUsers(user, userEmailSearch) // Pesquise o usuário\n      const data = response.data // Extraia os dados da resposta\n      const users = data instanceof Array ? data : [data] // Se os dados forem um array, use-os, caso contrário, crie um array com os dados\n      setUsers(users) // Atualize o estado com os novos usuários\n    } catch (error) {\n      handleLogError(error) // Manipule qualquer erro que ocorra\n      setUsers([]) // Limpe a lista de usuários\n    }\n  }\n\n  // Função para alterar o papel de um usuário\n  const handleChangeRole = async (email, newRole) => {\n    try {\n      await LoginApi.changeUserRole(user, email, newRole); // Altere o papel do usuário\n      await handleGetUsers(); // Atualize a lista de usuários\n    } catch (error) {\n      handleLogError(error); // Manipule qualquer erro que ocorra\n    }\n  };\n\n  // Se o usuário atual não for um administrador, redirecione para a página inicial\n  if (!isAdmin) {\n    return <Navigate to='/' />\n  }\n\n  // Renderize o componente AdminTab com as props apropriadas\n  return (\n      <Container>\n        <AdminTab\n            isUsersLoading={isUsersLoading}\n            users={users}\n            userEmailSearch={userEmailSearch}\n            handleDeleteUser={handleDeleteUser}\n            handleSearchUser={handleSearchUser}\n            handleInputChange={handleInputChange}\n            handleChangeRole={handleChangeRole}\n        />\n      </Container>\n  )\n}\n\nexport default AdminPage\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}