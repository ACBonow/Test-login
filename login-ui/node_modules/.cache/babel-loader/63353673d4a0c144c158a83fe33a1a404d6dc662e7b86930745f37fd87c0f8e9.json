{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bonow\\\\Desktop\\\\Teste-Login(recoveryFuncionando)\\\\Teste-Login\\\\login-ui\\\\src\\\\components\\\\home\\\\RecoveryPass.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react'; // Importa o pacote React e o hook useState\nimport { NavLink, Navigate } from 'react-router-dom'; // Importa os componentes NavLink e Navigate do pacote react-router-dom\nimport { Button, Form, Grid, Segment, Message, Statistic } from 'semantic-ui-react'; // Importa os componentes do pacote semantic-ui-react\nimport { useAuth } from '../context/AuthContext'; // Importa o hook useAuth do contexto de autenticação\nimport { LoginApi } from '../misc/LoginApi'; // Importa a API de login\nimport { handleLogError } from '../misc/Helpers'; // Importa a função de manipulação de erros\n\n//Este arquivo define o componente RecoveryPass em JavaScript, que é a página de recuperação de senha do aplicativo.\n// Ele permite que os usuários insiram suas informações para recuperar a senha. Se a recuperação for bem-sucedida, o\n// usuário será autenticado e redirecionado para a página inicial. Caso contrário, uma mensagem de erro será exibida.\n\n// Função para validar a senha\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction validatePassword(password) {\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\n  return re.test(password);\n}\n\n// Define o componente RecoveryPass\nfunction RecoveryPass() {\n  _s();\n  const Auth = useAuth();\n  {/*// Obtenha o contexto de autenticação*/}\n  const isLoggedIn = Auth.userIsAuthenticated(); // Verifique se o usuário está autenticado\n\n  // Define o estado para o email, senha, nome, cpf, se ocorreu um erro e a mensagem de erro\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [cpf, setCpf] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [successMessage, setSuccessMessage] = useState('');\n\n  // Manipulador para mudanças nos campos de entrada\n  const handleInputChange = (e, {\n    name,\n    value\n  }) => {\n    if (name === 'email') {\n      setEmail(value.toLowerCase()); // Transforma o email em minúsculas\n    } else if (name === 'password') {\n      setPassword(value);\n    } else if (name === 'name') {\n      setName(value.replace(/\\b\\w/g, l => l.toUpperCase())); // Transforma a primeira letra de cada palavra do nome em maiúscula\n    } else if (name === 'cpf') {\n      setCpf(value);\n    }\n  };\n\n  // Manipulador para o envio do formulário\n  const handleSubmit = async e => {\n    e.preventDefault(); // Previne o comportamento padrão do formulário\n\n    // Verifica se a senha é válida\n    if (!validatePassword(password)) {\n      setIsError(true); // Define o erro como verdadeiro\n      setErrorMessage('Password must have at least 8 characters, including one uppercase letter, one lowercase letter, and one number.');\n      return;\n    }\n\n    // Verifica se o email, senha, nome e cpf foram fornecidos\n    if (!(email && password && name && cpf)) {\n      setIsError(true); // Define o erro como verdadeiro\n      setErrorMessage('Please, inform all fields!');\n      return;\n    }\n    const user = {\n      email,\n      password,\n      name,\n      cpf\n    }; // Define o usuário\n\n    try {\n      // Tenta recuperar a senha do usuário\n      const response = await LoginApi.recoveryPass(user);\n      const {\n        id,\n        name,\n        role,\n        message\n      } = response.data;\n      const authdata = window.btoa(email + ':' + password);\n      const authenticatedUser = {\n        id,\n        name,\n        role,\n        authdata\n      };\n      Auth.userLogin(authenticatedUser); // Faz login do usuário\n\n      // Limpa o estado\n      setEmail('');\n      setPassword('');\n      setName('');\n      setCpf('');\n      setIsError(false);\n      setErrorMessage(message);\n      setSuccessMessage('Password changed successfully!');\n    } catch (error) {\n      handleLogError(error); // Manipula qualquer erro que ocorra\n      if (error.response && error.response.data) {\n        const errorData = error.response.data;\n        let errorMessage = 'Invalid fields';\n        if (errorData.message) {\n          errorMessage = errorData.message;\n        } else if (errorData.status === 409) {\n          errorMessage = errorData.message;\n        } else if (errorData.status === 400 && errorData.errors[0].defaultMessage) {\n          errorMessage = errorData.errors[0].defaultMessage;\n        }\n        setIsError(true); // Define o erro como verdadeiro\n        setErrorMessage(errorMessage);\n      }\n    }\n  };\n\n  // Se o usuário estiver autenticado, redireciona para a página inicial\n  if (isLoggedIn) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Renderiza o formulário de recuperação de senha\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    textAlign: \"center\",\n    children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        size: \"large\",\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(Statistic.Label, {\n          children: \"Recovery Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Statistic.Label, {\n          color: \"red\",\n          children: \"ATTENTION! Recovering the password removes Administrator permission!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Segment, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            autoFocus: true,\n            name: \"email\",\n            icon: \"user\",\n            iconPosition: \"left\",\n            placeholder: \"Email (lowercase)\",\n            value: email,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            name: \"password\",\n            icon: \"lock\",\n            iconPosition: \"left\",\n            placeholder: \"Password (at least 8 characters, including one uppercase letter, one lowercase letter, and one number)\",\n            type: \"password\",\n            value: password,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            name: \"name\",\n            icon: \"address card\",\n            iconPosition: \"left\",\n            placeholder: \"Name\",\n            value: name,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            name: \"cpf\",\n            icon: \"id card\",\n            iconPosition: \"left\",\n            placeholder: \"CPF(WITHOUT DOTS AND HYPHEN)\",\n            value: cpf,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"blue\",\n            fluid: true,\n            size: \"large\",\n            children: \"Signup\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), isError && /*#__PURE__*/_jsxDEV(Message, {\n        negative: true,\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }, this), successMessage && /*#__PURE__*/_jsxDEV(Message, {\n        positive: true,\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 30\n      }, this), /*#__PURE__*/_jsxDEV(Message, {\n        children: [`Already have an account? `, /*#__PURE__*/_jsxDEV(NavLink, {\n          to: \"/login\",\n          color: \"teal\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 7\n  }, this);\n}\n_s(RecoveryPass, \"f1j+XFtAXlX/aB/G88KhJgypl8I=\", false, function () {\n  return [useAuth];\n});\n_c = RecoveryPass;\nexport default RecoveryPass; // Exporta o componente RecoveryPass\nvar _c;\n$RefreshReg$(_c, \"RecoveryPass\");","map":{"version":3,"names":["React","useState","NavLink","Navigate","Button","Form","Grid","Segment","Message","Statistic","useAuth","LoginApi","handleLogError","jsxDEV","_jsxDEV","validatePassword","password","re","test","RecoveryPass","_s","Auth","isLoggedIn","userIsAuthenticated","email","setEmail","setPassword","name","setName","cpf","setCpf","isError","setIsError","errorMessage","setErrorMessage","successMessage","setSuccessMessage","handleInputChange","e","value","toLowerCase","replace","l","toUpperCase","handleSubmit","preventDefault","user","response","recoveryPass","id","role","message","data","authdata","window","btoa","authenticatedUser","userLogin","error","errorData","status","errors","defaultMessage","to","fileName","_jsxFileName","lineNumber","columnNumber","textAlign","children","Column","style","maxWidth","size","onSubmit","Label","color","Input","fluid","autoFocus","icon","iconPosition","placeholder","onChange","type","negative","positive","_c","$RefreshReg$"],"sources":["C:/Users/bonow/Desktop/Teste-Login(recoveryFuncionando)/Teste-Login/login-ui/src/components/home/RecoveryPass.js"],"sourcesContent":["import React, { useState } from 'react' // Importa o pacote React e o hook useState\r\nimport { NavLink, Navigate } from 'react-router-dom' // Importa os componentes NavLink e Navigate do pacote react-router-dom\r\nimport {Button, Form, Grid, Segment, Message, Statistic} from 'semantic-ui-react' // Importa os componentes do pacote semantic-ui-react\r\nimport { useAuth } from '../context/AuthContext' // Importa o hook useAuth do contexto de autenticação\r\nimport { LoginApi } from '../misc/LoginApi' // Importa a API de login\r\nimport { handleLogError } from '../misc/Helpers' // Importa a função de manipulação de erros\r\n\r\n//Este arquivo define o componente RecoveryPass em JavaScript, que é a página de recuperação de senha do aplicativo.\r\n// Ele permite que os usuários insiram suas informações para recuperar a senha. Se a recuperação for bem-sucedida, o\r\n// usuário será autenticado e redirecionado para a página inicial. Caso contrário, uma mensagem de erro será exibida.\r\n\r\n// Função para validar a senha\r\nfunction validatePassword(password) {\r\n  const re = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/;\r\n  return re.test(password);\r\n}\r\n\r\n// Define o componente RecoveryPass\r\nfunction RecoveryPass() {\r\n  const Auth = useAuth(); {/*// Obtenha o contexto de autenticação*/}\r\n  const isLoggedIn = Auth.userIsAuthenticated() // Verifique se o usuário está autenticado\r\n\r\n  // Define o estado para o email, senha, nome, cpf, se ocorreu um erro e a mensagem de erro\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [name, setName] = useState('')\r\n  const [cpf, setCpf] = useState('')\r\n  const [isError, setIsError] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState('')\r\n  const [successMessage, setSuccessMessage] = useState('')\r\n\r\n  // Manipulador para mudanças nos campos de entrada\r\n  const handleInputChange = (e, { name, value }) => {\r\n    if (name === 'email') {\r\n      setEmail(value.toLowerCase()) // Transforma o email em minúsculas\r\n    } else if (name === 'password') {\r\n      setPassword(value)\r\n    } else if (name === 'name') {\r\n      setName(value.replace(/\\b\\w/g, l => l.toUpperCase())) // Transforma a primeira letra de cada palavra do nome em maiúscula\r\n    } else if (name === 'cpf') {\r\n      setCpf(value)\r\n    }\r\n  }\r\n\r\n  // Manipulador para o envio do formulário\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault() // Previne o comportamento padrão do formulário\r\n\r\n    // Verifica se a senha é válida\r\n    if (!validatePassword(password)) {\r\n      setIsError(true) // Define o erro como verdadeiro\r\n      setErrorMessage('Password must have at least 8 characters, including one uppercase letter, one lowercase letter, and one number.')\r\n      return\r\n    }\r\n\r\n    // Verifica se o email, senha, nome e cpf foram fornecidos\r\n    if (!(email && password && name && cpf)) {\r\n      setIsError(true) // Define o erro como verdadeiro\r\n      setErrorMessage('Please, inform all fields!')\r\n      return\r\n    }\r\n\r\n    const user = { email, password, name, cpf } // Define o usuário\r\n\r\n    try {\r\n      // Tenta recuperar a senha do usuário\r\n      const response = await LoginApi.recoveryPass(user)\r\n      const { id, name, role, message } = response.data\r\n      const authdata = window.btoa(email + ':' + password)\r\n      const authenticatedUser = { id, name, role, authdata }\r\n\r\n      Auth.userLogin(authenticatedUser) // Faz login do usuário\r\n\r\n      // Limpa o estado\r\n      setEmail('')\r\n      setPassword('')\r\n      setName('')\r\n      setCpf('')\r\n      setIsError(false)\r\n      setErrorMessage(message)\r\n      setSuccessMessage('Password changed successfully!')\r\n    } catch (error) {\r\n      handleLogError(error) // Manipula qualquer erro que ocorra\r\n      if (error.response && error.response.data) {\r\n        const errorData = error.response.data\r\n        let errorMessage = 'Invalid fields'\r\n        if (errorData.message) {\r\n          errorMessage = errorData.message\r\n        } else if (errorData.status === 409) {\r\n          errorMessage = errorData.message\r\n        } else if (errorData.status === 400 && errorData.errors[0].defaultMessage) {\r\n          errorMessage = errorData.errors[0].defaultMessage\r\n        }\r\n        setIsError(true) // Define o erro como verdadeiro\r\n        setErrorMessage(errorMessage)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Se o usuário estiver autenticado, redireciona para a página inicial\r\n  if (isLoggedIn) {\r\n    return <Navigate to='/' />\r\n  }\r\n\r\n  // Renderiza o formulário de recuperação de senha\r\n  return (\r\n      <Grid textAlign='center'>\r\n        <Grid.Column style={{ maxWidth: 450 }}>\r\n          <Form size='large' onSubmit={handleSubmit}>\r\n            <Statistic.Label>Recovery Password</Statistic.Label>\r\n            <Statistic.Label color='red'>ATTENTION! Recovering the password removes Administrator permission!</Statistic.Label>\r\n\r\n            <Segment>\r\n              <Form.Input\r\n                  fluid\r\n                  autoFocus\r\n                  name='email'\r\n                  icon='user'\r\n                  iconPosition='left'\r\n                  placeholder='Email (lowercase)'\r\n                  value={email}\r\n                  onChange={handleInputChange}\r\n              />\r\n              <Form.Input\r\n                  fluid\r\n                  name='password'\r\n                  icon='lock'\r\n                  iconPosition='left'\r\n                  placeholder='Password (at least 8 characters, including one uppercase letter, one lowercase letter, and one number)'\r\n                  type='password'\r\n                  value={password}\r\n                  onChange={handleInputChange}\r\n              />\r\n              <Form.Input\r\n                  fluid\r\n                  name='name'\r\n                  icon='address card'\r\n                  iconPosition='left'\r\n                  placeholder='Name'\r\n                  value={name}\r\n                  onChange={handleInputChange}\r\n              />\r\n              <Form.Input\r\n                  fluid\r\n                  name='cpf'\r\n                  icon='id card'\r\n                  iconPosition='left'\r\n                  placeholder='CPF(WITHOUT DOTS AND HYPHEN)'\r\n                  value={cpf}\r\n                  onChange={handleInputChange}\r\n              />\r\n                <Button color='blue' fluid size='large'>Signup</Button>\r\n            </Segment>\r\n          </Form>\r\n          {isError && <Message negative>{errorMessage}</Message>}\r\n          {successMessage && <Message positive>{successMessage}</Message>}\r\n          <Message>{`Already have an account? `}\r\n            <NavLink to=\"/login\" color='teal'>Login</NavLink>\r\n          </Message>\r\n        </Grid.Column>\r\n      </Grid>\r\n  )\r\n}\r\n\r\nexport default RecoveryPass // Exporta o componente RecoveryPass"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}